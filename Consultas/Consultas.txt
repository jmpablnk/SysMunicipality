-----------------------top propuestas con mas votos--------------------------
/*
select * 
from (SELECT count(p.id_proposal), p.proposal_title
             FROM proposal p inner join vote_proposal_x_user vu on p.id_proposal=vu.id_proposal
             group by p.id_proposal,p.proposal_title
             order by count(p.id_proposal) desc)
where ROWNUM <= 2
*/

CREATE OR REPLACE function  getTopProposals (topN IN NUMBER)  
     RETURN SYS_REFCURSOR
  IS
     l_return   SYS_REFCURSOR;
BEGIN
            open l_return for
            select *
            from (SELECT count(p.id_proposal), p.proposal_title
                 FROM proposal p inner join vote_proposal_x_user vu on p.id_proposal=vu.id_proposal
                 group by p.id_proposal,p.proposal_title
                 order by count(p.id_proposal) desc)
            where ROWNUM <= topN;
            return l_return;
END;
-------------------------TOP comunidades  con mas propuestas-------------------------
/*
select * 
from (SELECT count(c.id_community), c.community_name
             FROM proposal p inner join community c on p.id_community=c.id_community
             group by c.id_community,c.community_name
             order by count(c.id_community) desc)
where ROWNUM <= 2
*/

CREATE OR REPLACE function  getTopCommunities (topN IN NUMBER)  
     RETURN SYS_REFCURSOR
  IS
     l_return   SYS_REFCURSOR;
BEGIN
            open l_return for
            select * 
            from (SELECT count(c.id_community), c.community_name
                 FROM proposal p inner join community c on p.id_community=c.id_community
                 group by c.id_community,c.community_name
                 order by count(c.id_community) desc)
             where ROWNUM <= topN;
            return l_return;
END;
---------------------Propuestas de un usuario -----------------
/*SELECT p.ID_proposal,p.proposal_title,p.proposal_description
             FROM proposal p inner join vote_proposal_x_user vu on p.id_proposal=vu.id_proposal
             Where(vu.id_user = 0);*/
			 
CREATE OR REPLACE function  getProposals (id_Search IN NUMBER)  
     RETURN SYS_REFCURSOR
  IS
     l_return   SYS_REFCURSOR;
BEGIN
            open l_return for
            SELECT p.ID_proposal,p.proposal_title,p.proposal_description
             FROM proposal p inner join vote_proposal_x_user vu on p.id_proposal=vu.id_proposal
             Where(vu.id_user = id_Search);
            return l_return;
END;
----------------------------Filtros-------------


CREATE OR REPLACE function  ranksFilters(rank in number,rangeDate1 in Date,rangeDate2 in Date, numVotes in number )
     RETURN SYS_REFCURSOR
  IS
     l_return   SYS_REFCURSOR;
BEGIN
            open l_return for
            SELECT * 
            from(
                   SELECT p.ID_proposal,p.proposal_title,p.proposal_description,p.qualification,count(p.ID_proposal) as Votes, p.fec_creacion
                   FROM proposal p inner join vote_proposal_x_user vu on p.id_proposal=vu.id_proposal
                   group by(p.ID_proposal,p.proposal_title,p.proposal_description,p.qualification)
                   order by(p.qualification)
                   )
             WHERE (qualification>rank OR rank is NULL ) AND
                   (numVotes<Votes OR numVotes is NULL)AND
                   ((fec_creacion<rangeDate2 AND fec_creacion>rangeDate1) OR rangeDate2 is NULL OR rangeDate1 is NULL);
            return l_return;
END;

------cambio de contrase√±a 10 dias ---
CREATE OR REPLACE function  getPasswordChanged(name in varchar2,last_name1 in varchar2,last_name2 in varchar2,user in varchar2, cedulaP in number)  
     RETURN SYS_REFCURSOR
  IS
       l_return   SYS_REFCURSOR;
BEGIN
            open l_return for
            select * 
               FROM binnacle b inner join p_user u on u.id_user = b.id_user
                               inner join person p on p.id_person = u.id_user
               WHERE SYSDATE-10 < b.dates AND  (p.first_name = name OR name IS NULL)AND  
                (u.user_name = user OR user IS NULL)AND  
                (p.first_last_name = last_name1 OR first_last_name IS NULL)AND  
                (p.second_last_name = last_name2 OR second_last_name IS NULL)/*AND  
                (p.cedula = cedulaP OR cedulaP IS NULL)*/;
            return l_return;
END;



---------------Porcentages Por calificacion--------------------
CREATE OR REPLACE function  qualificationPorcentage  
     RETURN SYS_REFCURSOR
  IS
     l_return   SYS_REFCURSOR;
BEGIN
            open l_return for
                 SELECT p.qualification as Rank, count(p.qualification) as Ranked ,round(100*ratio_to_report(count(*)) over (), 2) perc
                 FROM proposal p 
                 group by(p.qualification) 
                 order by(p.qualification) desc;
            return l_return;
END;
         